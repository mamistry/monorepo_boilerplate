{"version":3,"sources":["logo.svg","App.tsx","reportWebVitals.ts","../../src/index.ts","index.tsx"],"names":["EXCHANGE_RATES","gql","App","useQuery","loading","error","data","className","src","logo","alt","rates","map","currency","rate","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","client","apolloClient","document","getElementById"],"mappings":"uMAAe,MAA0B,iC,yBCMnCA,EAAiBC,cAAH,8HA8BLC,MArBf,WAAgB,IAAD,EACoBC,mBAASH,GAAlCI,EADK,EACLA,QAASC,EADJ,EACIA,MAAOC,EADX,EACWA,KAExB,OAAIF,EAAgB,2CAChBC,EAAc,yCAEhB,qBAAKE,UAAU,MAAf,SACE,yBAAQA,UAAU,aAAlB,UACE,qBAAKC,IAAKC,EAAMF,UAAU,WAAWG,IAAI,SACxCJ,EAAKK,MAAMC,KAAI,gBAAGC,EAAH,EAAGA,SAAUC,EAAb,EAAaA,KAAb,OACd,8BACE,8BACGD,EADH,KACeC,MAFPD,YCXLE,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,O,QCPD,EAAe,IAAI,eAAa,CACzC,IAAG,wCACL,MAAO,IAAI,kBCIbQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,iBAAD,CAAgBC,OAAQC,EAAxB,SACE,cAAC,EAAD,QAGJC,SAASC,eAAe,SAM1Bf,M","file":"static/js/main.27995ece.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","// @ts-nocheck\nimport React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport { useQuery, gql } from '@apollo/client';\n\nconst EXCHANGE_RATES = gql`\n  query GetExchangeRates {\n    rates(currency: \"USD\") {\n      currency\n      rate\n    }\n  }\n`;\n\nfunction App() {\n  const { loading, error, data } = useQuery(EXCHANGE_RATES);\n\n  if (loading) return <p>Loading...</p>;\n  if (error) return <p>Error :(</p>;\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        {data.rates.map(({ currency, rate }) => (\n          <div key={currency}>\n            <p>\n              {currency}: {rate}\n            </p>\n          </div>\n        ))}\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { ApolloClient, InMemoryCache } from '@apollo/client';\nexport var apolloClient = new ApolloClient({\n    uri: 'https://48p1r2roz4.sse.codesandbox.io',\n    cache: new InMemoryCache()\n});\n//# sourceMappingURL=index.js.map","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { ApolloProvider } from '@apollo/client';\nimport { apolloClient } from 'common';\n\nReactDOM.render(\n  <React.StrictMode>\n    <ApolloProvider client={apolloClient}>\n      <App />\n    </ApolloProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}